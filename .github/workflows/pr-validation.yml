name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
            merge
          scopes: |
            workflows
            scripts
            docs
            bazel
            cmake
            maven
            nix
            ci
            deploy
            templates
            hooks
            agents
          requireScope: false
          subjectPattern: ^[a-z].+$
          subjectPatternError: |
            Subject must start with lowercase letter and be descriptive.
            Examples:
              - feat(bazel): add C++26 support
              - fix(workflows): correct matrix syntax
              - docs: update API reference
          wip: true
          validateSingleCommit: false

      - name: Check Branch Name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"

          # Valid branch pattern: <type>/<issue>-<description> or <type>/<description>
          if [[ "$BRANCH_NAME" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)/.+ ]]; then
            echo "‚úì Branch name follows semantic convention"

            # Check if it includes issue number
            if [[ "$BRANCH_NAME" =~ ^[a-z]+/[0-9]+-[a-z] ]]; then
              echo "‚úì Branch includes issue number"
            else
              echo "‚ö†Ô∏è  Warning: Branch doesn't include issue number (recommended format: type/123-description)"
            fi
          else
            echo "‚úó Branch name doesn't follow semantic convention"
            echo ""
            echo "Expected format: <type>/<issue>-<description>"
            echo "Examples:"
            echo "  - feat/42-add-cpp26-support"
            echo "  - fix/38-workflow-matrix-bug"
            echo "  - docs/45-api-examples"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
            exit 1
          fi

      - name: Check Commit Messages
        run: |
          echo "Checking commit messages..."

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Get all commits in PR
          COMMITS=$(git log --format=%H $BASE_SHA..$HEAD_SHA)

          INVALID_COUNT=0
          TOTAL_COUNT=0

          for commit in $COMMITS; do
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            MSG=$(git log --format=%s -n 1 $commit)

            # Skip merge commits
            if [[ "$MSG" =~ ^Merge ]]; then
              continue
            fi

            # Check semantic format
            if [[ "$MSG" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|merge)(\(.+\))?!?:\ .+ ]]; then
              echo "‚úì $commit: $MSG"
            else
              echo "‚úó $commit: $MSG"
              INVALID_COUNT=$((INVALID_COUNT + 1))
            fi
          done

          echo ""
          echo "Checked $TOTAL_COUNT commits"

          if [ $INVALID_COUNT -gt 0 ]; then
            echo "‚úó Found $INVALID_COUNT invalid commit message(s)"
            echo ""
            echo "Commit messages must follow semantic format:"
            echo "  <type>(<scope>): <subject>"
            echo ""
            echo "See docs/SEMANTIC-COMMITS.md for details"
            exit 1
          else
            echo "‚úì All commit messages are valid"
          fi

      - name: Check for Issue Reference
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          # Check if issue is referenced in body, title, or branch
          if echo "$PR_BODY" | grep -qiE "(closes?|fixes?|resolves?) #[0-9]+"; then
            echo "‚úì Issue referenced in PR body"
            exit 0
          fi

          if echo "$PR_TITLE" | grep -qE "#[0-9]+"; then
            echo "‚úì Issue referenced in PR title"
            exit 0
          fi

          if echo "$BRANCH_NAME" | grep -qE "/[0-9]+-"; then
            echo "‚úì Issue number in branch name"
            exit 0
          fi

          echo "‚ö†Ô∏è  Warning: No issue reference found"
          echo ""
          echo "It's recommended to link PRs to issues using:"
          echo "  - 'Closes #123' in PR body"
          echo "  - Issue number in branch name: feat/123-description"
          echo ""
          echo "This is a warning only, not blocking."

      - name: Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

  comment:
    name: Add PR Comment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.action == 'opened'

    steps:
      - name: Add Welcome Comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## Thank you for your contribution! üéâ

            Your PR has been validated and is ready for review.

            ### What happens next?
            1. Automated checks will run (tests, linting, etc.)
            2. Maintainers will review your changes
            3. You may be asked to make updates based on feedback
            4. Once approved, your PR will be merged

            ### While you wait
            - Ensure all CI checks pass ‚úÖ
            - Review the [CONTRIBUTING.md](../blob/main/docs/CONTRIBUTING.md) guide
            - Check [docs/SEMANTIC-COMMITS.md](../blob/main/docs/SEMANTIC-COMMITS.md) for commit guidelines

            ---
            ü§ñ This comment was generated automatically`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
