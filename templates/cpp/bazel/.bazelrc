# Artagon Bazel Configuration for C++ Projects

# Build settings
build --enable_platform_specific_config
build --incompatible_strict_action_env
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# C++ Standard (C++23)
build --cxxopt=-std=c++23
build --host_cxxopt=-std=c++23

# Compilation flags
build --cxxopt=-Wall
build --cxxopt=-Wextra
build --cxxopt=-Wpedantic
build --cxxopt=-Werror
build --cxxopt=-Wnon-virtual-dtor
build --cxxopt=-Wold-style-cast
build --cxxopt=-Woverloaded-virtual

# Optimization for release
build:release --compilation_mode=opt
build:release --copt=-O3
build:release --copt=-DNDEBUG
build:release --strip=always
build:release --copt=-flto
build:release --linkopt=-flto

# Debug configuration
build:debug --compilation_mode=dbg
build:debug --copt=-g
build:debug --copt=-O0
build:debug --strip=never

# Sanitizers
build:asan --copt=-fsanitize=address
build:asan --linkopt=-fsanitize=address
build:asan --copt=-fno-omit-frame-pointer
build:asan --test_env=ASAN_OPTIONS=detect_leaks=1:check_initialization_order=1

build:ubsan --copt=-fsanitize=undefined
build:ubsan --linkopt=-fsanitize=undefined
build:ubsan --test_env=UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1

build:tsan --copt=-fsanitize=thread
build:tsan --linkopt=-fsanitize=thread
build:tsan --test_env=TSAN_OPTIONS=second_deadlock_stack=1

build:msan --copt=-fsanitize=memory
build:msan --linkopt=-fsanitize=memory
build:msan --copt=-fsanitize-memory-track-origins
build:msan --test_env=MSAN_OPTIONS=poison_in_dtor=1

# Coverage
build:coverage --combined_report=lcov
build:coverage --instrumentation_filter="//..."
build:coverage --collect_code_coverage
build:coverage --test_env=LLVM_PROFILE_FILE=coverage/profile_%p.profraw

# Test configuration
test --test_output=errors
test --test_verbose_timeout_warnings
test --test_env=GTEST_COLOR=1

# Platform-specific configurations
build:linux --cxxopt=-std=c++23
build:macos --cxxopt=-std=c++23
build:macos --cxxopt=-stdlib=libc++
build:windows --cxxopt=/std:c++latest

# Try to use hermetic C++ toolchain
build --incompatible_enable_cc_toolchain_resolution

# Remote cache (if available)
# build --remote_cache=grpc://your-cache-server:port

# Disk cache
build --disk_cache=~/.cache/bazel

# Show detailed errors
build --verbose_failures

# Color output
common --color=yes

# Keep going after errors
build --keep_going

# Modern C++ features
build --cxxopt=-fcoroutines
build --cxxopt=-fno-rtti  # Disable RTTI for smaller binaries (optional)

# Performance
build --jobs=auto
