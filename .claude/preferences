# Claude Code Preferences for artagon-common

## Development Workflow

### Issue-Driven Development

ALL development must follow the issue-driven workflow:

1. **Create or Find Issue**
   - Every change starts with a GitHub issue
   - Use `gh issue create` with appropriate labels
   - Label types: `enhancement` (feat), `bug` (fix), `documentation` (docs), `chore`, etc.

2. **Create Semantic Branch**
   - Use automation: `./scripts/gh_create_issue_branch.sh <issue-number>`
   - Format: `<type>/<issue>-<short-description>`
   - Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore
   - Examples:
     - `feat/42-add-cpp26-support`
     - `fix/38-workflow-matrix-bug`
     - `docs/45-update-api-guide`

3. **Semantic Commits**
   - Format: `<type>(<scope>): <subject>`
   - Always include issue reference in body: `Closes #42` or `Fixes #38`
   - Use imperative mood: "add" not "added"
   - Start subject with lowercase
   - No period at end of subject
   - Keep subject <= 50 chars (72 max)

4. **Create Pull Request**
   - Use automation: `./scripts/gh_create_pr.sh`
   - PR title must follow semantic format
   - Fill PR template completely
   - Link to issue: `Closes #42`

5. **Commit and Push**
   - Commit messages validated by `commit-msg` hook
   - Push to feature branch
   - Never push directly to `main` or `develop`

### Semantic Commit Format

**Structure:**
```
<type>(<scope>): <subject>

<body>

<footer>
```

**Types (REQUIRED):**
- `feat`: New feature (MINOR semver)
- `fix`: Bug fix (PATCH semver)
- `docs`: Documentation only
- `style`: Formatting (no logic change)
- `refactor`: Code refactoring
- `perf`: Performance improvement
- `test`: Tests
- `build`: Build system/dependencies
- `ci`: CI/CD changes
- `chore`: Maintenance

**Scope (OPTIONAL but recommended):**
- `workflows`, `scripts`, `docs`, `bazel`, `cmake`, `maven`, `nix`, `ci`, `deploy`

**Breaking Changes:**
- Add `!` after type/scope: `feat(api)!: change signature`
- Include `BREAKING CHANGE:` in footer with migration guide

**Examples:**
```
feat(bazel): add C++26 standard support

Add C++26 compiler flags and feature detection to Bazel configuration.
Includes test matrix updates for new standard.

Closes #42

---

fix(workflows): correct matrix generation in cpp-ci.yml

The matrix was generating single job instead of multiple jobs.
Changed input format from space-separated to comma-separated.

Fixes #38

---

docs(api): add comprehensive examples for all functions

Closes #45
```

### Branch Naming Convention

**Format:** `<type>/<issue>-<description>`

**Rules:**
- Lowercase only
- Use hyphens (not underscores or spaces)
- Always include issue number
- Keep description to 3-5 words
- Match commit type

**Examples:**
- `feat/42-add-cpp26-support` ✓
- `fix/38-workflow-matrix` ✓
- `docs/45-api-examples` ✓
- `feature/add-cpp26` ✗ (wrong type)
- `feat-42-support` ✗ (wrong separator)
- `feat/add-support` ✗ (no issue number)

### Agent Behavior Requirements

When working as an AI agent (Claude Code), you MUST:

1. **Always Create Issues First**
   - Before any code changes, create or reference a GitHub issue
   - Use `gh issue create` with appropriate title and labels
   - Document the problem/feature clearly

2. **Follow Branch Workflow**
   - Create semantic branch using `./scripts/gh_create_issue_branch.sh <issue>`
   - Never work directly on `main` or `develop`
   - Switch to feature branch before making changes

3. **Use Semantic Commits**
   - Every commit must follow semantic format
   - Include issue reference: `Closes #N` or `Fixes #N`
   - Write clear, descriptive subjects
   - Add body for non-trivial changes

4. **Create Pull Requests**
   - Use `./scripts/gh_create_pr.sh` after pushing
   - Fill PR template completely
   - Link to related issues
   - Wait for human review (don't auto-merge)

5. **Documentation**
   - Update relevant docs for every feature/fix
   - Keep examples current
   - Update CHANGELOG.md for significant changes

6. **Code Quality**
   - Run tests before committing
   - Apply shellcheck to scripts
   - Format code with appropriate tools
   - No uncommitted debug code

### Commit Message Validation

The `commit-msg` hook validates:
- Semantic format compliance
- Valid commit type
- Subject length (<= 72 chars)
- Imperative mood (warnings)
- Lowercase subject start (warnings)
- No period at end (warnings)

To bypass (USE SPARINGLY):
```bash
git commit --no-verify
```

### Example Workflow

**Full example of feature development:**

```bash
# 1. Create issue
gh issue create \
  --title "Add C++26 support to Bazel" \
  --label "enhancement" \
  --body "Add C++26 standard support with compiler flags..."

# Returns: Issue #42

# 2. Create branch
./scripts/gh_create_issue_branch.sh 42
# Creates: feat/42-add-cpp26-bazel-support
# Switches to branch automatically

# 3. Make changes
vim configs/cpp/.bazelrc
# Add C++26 flags

# 4. Commit (semantic format)
git add configs/cpp/.bazelrc
git commit -m "feat(bazel): add C++26 standard support

Add C++26 compiler flags and feature detection.
Includes test matrix updates for new standard.

Closes #42"

# 5. Push
git push -u origin feat/42-add-cpp26-bazel-support

# 6. Create PR
./scripts/gh_create_pr.sh
# Automatically fills PR template
# Links to issue #42

# 7. Wait for review and merge
# Issue closes automatically on merge
```

### References

- **Full Guide**: [docs/CONTRIBUTING.md](../docs/CONTRIBUTING.md)
- **Commit Format**: [docs/SEMANTIC-COMMITS.md](../docs/SEMANTIC-COMMITS.md)
- **Troubleshooting**: [docs/TROUBLESHOOTING.md](../docs/TROUBLESHOOTING.md)
- **Issue Templates**: [.github/ISSUE_TEMPLATE/](.github/ISSUE_TEMPLATE/)
- **PR Template**: [.github/PULL_REQUEST_TEMPLATE.md](.github/PULL_REQUEST_TEMPLATE.md)

### Quality Standards

- **Scripts**: Must pass shellcheck, use `set -euo pipefail`, proper error handling
- **Workflows**: Must have Nix detection, proper matrix configuration, caching
- **Documentation**: Must have examples, clear explanations, proper cross-references
- **Tests**: Must pass all existing tests, add tests for new functionality
- **Security**: No secrets committed, proper input validation, secure defaults

### Automation Scripts

Available automation tools:
- `./scripts/gh_create_issue_branch.sh <issue>` - Create branch from issue
- `./scripts/gh_create_pr.sh` - Create PR from current branch
- `./scripts/repo_add_artagon_common.sh` - Setup repository with hooks

### Git Hooks

Installed hooks (via setup script):
- `commit-msg` - Validates semantic commit format
- `pre-push` - Warns about non-semantic branches (future)

### Breaking Changes

When introducing breaking changes:
1. Add `!` to commit type: `feat!:` or `feat(scope)!:`
2. Include `BREAKING CHANGE:` in commit footer
3. Document migration path
4. Update major version
5. Announce in release notes

Example:
```
feat(api)!: change function signature for better type safety

BREAKING CHANGE: The `process()` function now requires a config object
as the second parameter instead of individual arguments.

Migration:
  Before: process(data, option1, option2)
  After:  process(data, { option1, option2 })

See docs/MIGRATION.md for details.

Closes #60
```

---

## Summary for AI Agents

When acting as Claude Code agent:

1. ✅ Create issue BEFORE any code changes
2. ✅ Create semantic branch: `./scripts/gh_create_issue_branch.sh <N>`
3. ✅ Use semantic commits with issue refs
4. ✅ Create PR: `./scripts/gh_create_pr.sh`
5. ✅ Update documentation
6. ✅ Run tests
7. ❌ Never work on main/develop directly
8. ❌ Never push without semantic commits
9. ❌ Never skip issue creation
10. ❌ Never merge PRs without human review

**This workflow is MANDATORY for all development.**
