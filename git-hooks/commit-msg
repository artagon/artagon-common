#!/usr/bin/env bash
set -euo pipefail

# Git commit-msg hook - Validates semantic commit message format
#
# This hook validates that commit messages follow the semantic format:
#   <type>(<scope>): <subject>
#
# Install: cp git-hooks/commit-msg .git/hooks/commit-msg && chmod +x .git/hooks/commit-msg

COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'

# Skip validation for certain commit types
# - Merge commits
# - Revert commits (they have special format)
# - Fixup/squash commits
if [[ "$COMMIT_MSG" =~ ^(Merge|Revert|fixup!|squash!) ]]; then
    exit 0
fi

# Skip if commit message starts with #
# (Used for commented-out messages)
if [[ "$COMMIT_MSG" =~ ^# ]]; then
    exit 0
fi

# Valid types
VALID_TYPES="feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert"

# Regex pattern for semantic commit
# Format: type(scope): subject
# Scope is optional: type: subject is also valid
# Breaking change indicator: type!: or type(scope)!:
PATTERN="^($VALID_TYPES)(\(.+\))?!?: .+"

# Validate commit message format
if ! [[ "$COMMIT_MSG" =~ $PATTERN ]]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo -e "${RED}❌ Invalid commit message format${NC}" >&2
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Your commit message:${NC}" >&2
    echo -e "${CYAN}$COMMIT_MSG${NC}" >&2
    echo >&2
    echo -e "${RED}Expected format:${NC}" >&2
    echo -e "  ${GREEN}<type>(<scope>): <subject>${NC}" >&2
    echo >&2
    echo -e "${RED}Valid types:${NC}" >&2
    echo -e "  ${CYAN}feat${NC}      - New feature" >&2
    echo -e "  ${CYAN}fix${NC}       - Bug fix" >&2
    echo -e "  ${CYAN}docs${NC}      - Documentation changes" >&2
    echo -e "  ${CYAN}style${NC}     - Code style/formatting" >&2
    echo -e "  ${CYAN}refactor${NC}  - Code refactoring" >&2
    echo -e "  ${CYAN}perf${NC}      - Performance improvement" >&2
    echo -e "  ${CYAN}test${NC}      - Tests" >&2
    echo -e "  ${CYAN}build${NC}     - Build system changes" >&2
    echo -e "  ${CYAN}ci${NC}        - CI/CD changes" >&2
    echo -e "  ${CYAN}chore${NC}     - Maintenance tasks" >&2
    echo -e "  ${CYAN}revert${NC}    - Revert previous commit" >&2
    echo >&2
    echo -e "${RED}Examples:${NC}" >&2
    echo -e "  ${GREEN}feat(bazel): add C++26 support${NC}" >&2
    echo -e "  ${GREEN}fix(workflows): correct matrix syntax${NC}" >&2
    echo -e "  ${GREEN}docs: update API reference${NC}" >&2
    echo -e "  ${GREEN}chore(deps): bump actions/checkout to v4${NC}" >&2
    echo >&2
    echo -e "${RED}Breaking changes:${NC}" >&2
    echo -e "  ${GREEN}feat(api)!: change function signature${NC}" >&2
    echo -e "  ${GREEN}fix!: remove deprecated endpoint${NC}" >&2
    echo >&2
    echo -e "${YELLOW}See docs/SEMANTIC-COMMITS.md for full guide${NC}" >&2
    echo >&2
    echo -e "${YELLOW}To bypass this check (not recommended):${NC}" >&2
    echo -e "  ${CYAN}git commit --no-verify${NC}" >&2
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    exit 1
fi

# Extract components for additional validation
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)

# Check subject length (should be <= 72 chars for header line)
if [[ ${#FIRST_LINE} -gt 72 ]]; then
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo -e "${YELLOW}⚠️  Warning: Subject line is too long${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Subject length: ${#FIRST_LINE} characters${NC}" >&2
    echo -e "${YELLOW}Recommended: 50 characters${NC}" >&2
    echo -e "${YELLOW}Maximum: 72 characters${NC}" >&2
    echo >&2
    echo -e "${CYAN}$FIRST_LINE${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Consider shortening your subject line${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    # Warning only, don't fail
fi

# Check for imperative mood (common mistakes)
SUBJECT=$(echo "$FIRST_LINE" | sed -E 's/^[a-z]+(\([^)]+\))?!?: //')
if [[ "$SUBJECT" =~ ^(adds|added|adding|fixes|fixed|fixing|updates|updated|updating) ]]; then
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo -e "${YELLOW}⚠️  Warning: Use imperative mood${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Your subject:${NC} ${CYAN}$SUBJECT${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Use imperative mood (present tense):${NC}" >&2
    echo -e "  ✗ 'adds', 'added', 'adding'" >&2
    echo -e "  ✓ 'add'" >&2
    echo >&2
    echo -e "  ✗ 'fixes', 'fixed', 'fixing'" >&2
    echo -e "  ✓ 'fix'" >&2
    echo >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    # Warning only, don't fail
fi

# Check for uppercase first letter in subject
if [[ "$SUBJECT" =~ ^[A-Z] ]]; then
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo -e "${YELLOW}⚠️  Warning: Subject should start with lowercase${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Your subject:${NC} ${CYAN}$SUBJECT${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Subject should start with lowercase letter${NC}" >&2
    echo -e "  ✗ 'Add feature'" >&2
    echo -e "  ✓ 'add feature'" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    # Warning only, don't fail
fi

# Check for period at end of subject
if [[ "$SUBJECT" =~ \.$ ]]; then
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo -e "${YELLOW}⚠️  Warning: Don't end subject with period${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Your subject:${NC} ${CYAN}$SUBJECT${NC}" >&2
    echo >&2
    echo -e "${YELLOW}Subject line should not end with period${NC}" >&2
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}" >&2
    # Warning only, don't fail
fi

# Success - commit message is valid
exit 0
